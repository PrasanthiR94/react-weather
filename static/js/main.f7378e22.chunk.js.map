{"version":3,"sources":["components/UI/AppBlock.js","App.js","reportWebVitals.js","index.js"],"names":["api","AppBlock","useState","query","setQuery","location","name","region","country","current","condition","text","temp_c","weather","setWeather","className","type","placeholder","onChange","e","target","value","onKeyPress","key","axios","get","then","response","data","console","log","catch","error","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sPAGMA,EACC,kCADDA,EAEK,gCA6GIC,EA1GE,WACf,MAA0BC,mBAAS,IAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA8BF,mBAAS,CACrCG,SAAU,CAAEC,KAAM,WAAYC,OAAQ,WAAYC,QAAS,MAC3DC,QAAS,CAAEC,UAAW,CAAEC,KAAM,QAAUC,OAAQ,QAFlD,mBAAOC,EAAP,KAAgBC,EAAhB,KA4DA,OACE,qBACEC,UAC4B,oBAAnBF,EAAQJ,SACXI,EAAQJ,QAAQG,OAAS,GACvB,WAEF,MANR,SASE,sBAAKG,UAAU,QAAf,UACE,qBAAKA,UAAU,aAAf,SACE,uBACEC,KAAK,OACLD,UAAU,cACVE,YAAY,YACZC,SAtDW,SAACC,GACpBf,EAASe,EAAEC,OAAOC,QAsDVA,MAAOlB,EACPmB,WAzEK,SAACH,GACA,UAAVA,EAAEI,KACJC,IACGC,IADH,UACUzB,EADV,4BACyCA,EADzC,cACsDG,EADtD,YAEGuB,MAAK,SAACC,GACLb,EAAWa,EAASC,MACpBxB,EAAS,IACTyB,QAAQC,IAAIH,MAEbI,OAAM,SAACC,GACNH,QAAQC,IAAR,UACK9B,EADL,4BACoCA,EADpC,cACiDG,EADjD,YAGA0B,QAAQC,IAAIE,EAAML,SAAU,iBA+DH,oBAAnBd,EAAQJ,QACd,gCACE,sBAAKM,UAAU,eAAf,UACE,sBAAKA,UAAU,WAAf,UACGF,EAAQR,SAASC,KADpB,IAC2BO,EAAQR,SAASE,OAC1C,uBACCM,EAAQR,SAASG,WAEpB,qBAAKO,UAAU,OAAf,SA9DQ,SAACkB,GACnB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAgCDE,CAAY,IAAIC,WAEzC,sBAAK5B,UAAU,aAAf,UACE,sBAAKA,UAAU,OAAf,UAAuBF,EAAQJ,QAAQG,OAAvC,cACA,qBAAKG,UAAU,UAAf,SAA0BF,EAAQJ,QAAQC,UAAUC,aAIxD,SChGKiC,MARf,WACE,OACE,qBAAK7B,UAAU,GAAf,SACE,cAAC,EAAD,OCMS8B,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBrB,MAAK,YAAkD,IAA/CsB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f7378e22.chunk.js","sourcesContent":["import axios from \"axios\";\r\nimport React, { useState } from \"react\";\r\n\r\nconst api = {\r\n  key: \"8da63b267e0b45ce9b8102707212511\",\r\n  baseURL: \"http://api.weatherapi.com/v1/\",\r\n};\r\n\r\nconst AppBlock = () => {\r\n  const [query, setQuery] = useState(\"\");\r\n  const [weather, setWeather] = useState({\r\n    location: { name: \"New York\", region: \"New York\", country: \"US\" },\r\n    current: { condition: { text: \"mist\" }, temp_c: \"15\" },\r\n  });\r\n\r\n  const search = (e) => {\r\n    if (e.key === \"Enter\") {\r\n      axios\r\n        .get(`${api.baseURL}current.json?key=${api.key}&q=${query}&aqi=no`)\r\n        .then((response) => {\r\n          setWeather(response.data);\r\n          setQuery(\"\");\r\n          console.log(response);\r\n        })\r\n        .catch((error) => {\r\n          console.log(\r\n            `${api.baseURL}current.json?key=${api.key}&q=${query}&aqi=no`\r\n          );\r\n          console.log(error.response, \"error\");\r\n        });\r\n    }\r\n  };\r\n  const inputHandler = (e) => {\r\n    setQuery(e.target.value);\r\n    // console.log(query, \"query\");\r\n  };\r\n\r\n  const dateBuilder = (d) => {\r\n    let months = [\r\n      \"January\",\r\n      \"February\",\r\n      \"March\",\r\n      \"April\",\r\n      \"May\",\r\n      \"June\",\r\n      \"July\",\r\n      \"August\",\r\n      \"September\",\r\n      \"October\",\r\n      \"November\",\r\n      \"December\",\r\n    ];\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\",\r\n    ];\r\n\r\n    let day = days[d.getDay()];\r\n    let date = d.getDate();\r\n    let month = months[d.getMonth()];\r\n    let year = d.getFullYear();\r\n\r\n    return `${day} ${date} ${month} ${year}`;\r\n  };\r\n\r\n  return (\r\n    <div\r\n      className={\r\n        typeof weather.current != \"undefined\"\r\n          ? weather.current.temp_c > 16\r\n            ? \"App warm\"\r\n            : \"App\"\r\n          : \"App\"\r\n      }\r\n    >\r\n      <div className=\"cover\">\r\n        <div className=\"search-box\">\r\n          <input\r\n            type=\"text\"\r\n            className=\"searchInput\"\r\n            placeholder=\"Search...\"\r\n            onChange={inputHandler}\r\n            value={query}\r\n            onKeyPress={search}\r\n          />\r\n        </div>\r\n        {typeof weather.current != \"undefined\" ? (\r\n          <div>\r\n            <div className=\"location-box\">\r\n              <div className=\"location\">\r\n                {weather.location.name},{weather.location.region}\r\n                <br />\r\n                {weather.location.country}\r\n              </div>\r\n              <div className=\"date\">{dateBuilder(new Date())}</div>\r\n            </div>\r\n            <div className=\"weatherBox\">\r\n              <div className=\"temp\">{weather.current.temp_c} &#x2103; </div>\r\n              <div className=\"weather\">{weather.current.condition.text}</div>\r\n            </div>\r\n          </div>\r\n        ) : (\r\n          \"\"\r\n        )}\r\n      </div> \r\n    </div>\r\n  );\r\n};\r\n\r\nexport default AppBlock;\r\n","import './App.css';\nimport AppBlock from './components/UI/AppBlock';\n\nfunction App() {\n  return (\n    <div className=\"\">\n      <AppBlock/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}